plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.pavelkuzmin'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23) // —Ç–≤–æ–π JDK 23
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.drewnoakes:metadata-extractor:2.18.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

application {
    // –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    mainClass = 'com.pavelkuzmin.sortit.Main'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

shadowJar {
    archiveBaseName.set('sortit')
    archiveClassifier.set('')      // –±–µ–∑ "-all"
    archiveVersion.set('')         // –±–µ–∑ –≤–µ—Ä—Å–∏–∏ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    mergeServiceFiles()
}

/**
 * –°–æ–∑–¥–∞—ë—Ç portable app-image (–ø–∞–ø–∫–∞ —Å SortIt.exe –∏ –í–°–¢–†–û–ï–ù–ù–´–ú runtime).
 * –ù–∏–∫–∞–∫–∏—Ö module-info.java –Ω–µ –Ω—É–∂–Ω–æ.
 *
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: JDK 23 (–∏–ª–∏ 17+) —Å —É—Ç–∏–ª–∏—Ç–æ–π jpackage.
 */
tasks.register('packAppImage', Exec) {
    dependsOn tasks.shadowJar

    doFirst {
        // –≥–¥–µ –ª–µ–∂–∏—Ç jpackage
        def javaHome = System.getenv('JAVA_HOME')
        if (!javaHome) javaHome = System.getProperty('java.home')
        def jpackageExe = file("${javaHome}/bin/jpackage.exe")
        if (!jpackageExe.exists()) jpackageExe = file("${javaHome}/bin/jpackage")
        if (!jpackageExe.exists()) {
            throw new GradleException("jpackage not found in ${javaHome}/bin")
        }

        def inputDir = "${buildDir}/libs"
        def destDir  = "${buildDir}/jpackage"

        // jlink-–æ–ø—Ü–∏–∏ –æ–¥–Ω–æ–π –°–¢–†–û–ö–û–ô:
        def jlinkOpts = "--strip-debug --no-header-files --no-man-pages"

        def cmd = [
                jpackageExe.absolutePath,
                '--type', 'app-image',
                '--name', 'SortIt',
                '--vendor', 'Pavel Kuzmin',
                '--app-version', project.version,
                '--input', inputDir,
                '--dest', destDir,
                '--main-jar', 'sortit.jar',
                '--main-class', application.mainClass.get(),
                '--add-modules', 'java.base,java.desktop',
                '--jlink-options', jlinkOpts
        ]

        def ico = file('src/main/resources/icons/app.ico')
        if (ico.exists()) {
            cmd += ['--icon', ico.absolutePath]
        }

        commandLine cmd
    }
}

// 1-—Ñ–∞–π–ª–æ–≤—ã–π SFX —á–µ—Ä–µ–∑ WinRAR: –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç SortIt.exe
tasks.register('sfxExe', Exec) {
    dependsOn tasks.packAppImage

    doFirst {
        // –≥–¥–µ WinRAR
        def wrDirs = [
                'C:/Program Files/WinRAR',
                'C:/Program Files (x86)/WinRAR'
        ].collect { new File(it) }
        File wrDir = wrDirs.find { it.exists() }
        if (wrDir == null) throw new GradleException("WinRAR –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ WinRAR –∏–ª–∏ –ø–æ–ø—Ä–∞–≤—å –ø—É—Ç—å –≤ build.gradle")

        File winrarExe = new File(wrDir, 'WinRAR.exe')
        if (!winrarExe.exists()) throw new GradleException("WinRAR.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ${wrDir}")

        // –ø–∞–ø–∫–∞ app-image –æ—Ç jpackage
        File appImageDir = file("$buildDir/jpackage/SortIt")
        if (!appImageDir.exists()) throw new GradleException("–ù–µ—Ç app-image: ${appImageDir}. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ packAppImage")

        // —Ä–∞–±–æ—á–∏–µ —Ñ–∞–π–ª—ã
        File outDir = file("$buildDir/sfx")
        outDir.mkdirs()
        File comment = new File(outDir, "winrar_sfx_comment.txt")
        File outExe  = new File(outDir, "SortIt_portable.exe")

        // WinRAR SFX-—Å–∫—Ä–∏–ø—Ç
        def sfxScript = """;The comment below contains SFX script commands
TempMode
Setup=SortIt.exe
Title=SortIt
Silent=0
Overwrite=1
"""
        // –ø–∏—à–µ–º —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫–æ–π
        comment.setText(sfxScript, "UTF-8")

        // –ó–∞–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –í–°–Å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ app-image –≤ –æ–¥–∏–Ω SFX-exe
        // a = —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤; -sfx = —Å–∞–º–æ—Ä–∞—Å–ø–∞–∫.; -ep1 = –±–µ–∑ –≤–µ–¥—É—â–∏—Ö –ø—É—Ç–µ–π; -r = —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ; -inul = —Ç–∏—Ö–æ; -z = —Å–∫—Ä–∏–ø—Ç
        workingDir appImageDir
        commandLine(
                winrarExe.absolutePath,
                'a', '-sfx', '-ep1', '-r', '-inul',
                "-z${comment.absolutePath}",
                outExe.absolutePath,
                '.' // –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ appImageDir
        )
    }
}

// MSI-–∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä —Å UI: –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏, —è—Ä–ª—ã–∫–∏, –º–µ–Ω—é. –¢—Ä–µ–±—É–µ—Ç—Å—è WiX 3.x.
tasks.register('packMsi', Exec) {
    dependsOn tasks.shadowJar

    doFirst {
        // 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ WiX
        def wixDirs = [
                'C:/Program Files (x86)/WiX Toolset v3.11/bin',
                'C:/Program Files (x86)/WiX Toolset v3.14/bin',
                'C:/Program Files/WiX Toolset v3.11/bin',
                'C:/Program Files/WiX Toolset v3.14/bin'
        ].collect { new File(it) }
        File wixBin = wixDirs.find { new File(it, 'candle.exe').exists() && new File(it, 'light.exe').exists() }
        if (!wixBin) throw new GradleException("WiX Toolset –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ WiX 3.x –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏.")

        // 2) jpackage
        def javaHome = System.getenv('JAVA_HOME') ?: System.getProperty('java.home')
        File jpackageExe = new File("${javaHome}/bin/jpackage.exe")
        if (!jpackageExe.exists()) jpackageExe = new File("${javaHome}/bin/jpackage")
        if (!jpackageExe.exists()) throw new GradleException("jpackage –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ${javaHome}/bin")

        // 3) –ü—É—Ç–∏
        def inputDir = "${buildDir}/libs"
        def destDir  = "${buildDir}/jpackage"

        // 4) –ò–∫–æ–Ω–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        def iconArg = []
        def ico = file('src/main/resources/icons/app.ico')
        if (ico.exists()) iconArg = ['--icon', ico.absolutePath]

        // 5) –†–µ—Å—É—Ä—Å—ã —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ª–∏—Ü–µ–Ω–∑–∏—è)
        // –ï—Å–ª–∏ –ø–æ–ª–æ–∂–∏—à—å —Ñ–∞–π–ª installer/windows/license.rtf ‚Äî –ø–æ—è–≤–∏—Ç—Å—è —ç–∫—Ä–∞–Ω –ª–∏—Ü–µ–Ω–∑–∏–∏.
        def resArgs = []
        def resDir = file('installer/windows')
        if (resDir.exists()) resArgs = ['--resource-dir', resDir.absolutePath]
        // –ü–∞–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–∞–π–ª license.rtf (RTF-—Ñ–æ—Ä–º–∞—Ç)

        // 6) jlink-–æ–ø—Ü–∏–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å compress, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
        def jlinkOpts = "--strip-debug --no-header-files --no-man-pages"

        // 7) –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å
        def mainCls = project.extensions.getByType(org.gradle.api.plugins.JavaApplication).mainClass.get()

        // 8) –ö–æ–º–∞–Ω–¥–∞
        def cmd = [
                jpackageExe.absolutePath,
                '--type', 'msi',
                '--name', 'SortIt',
                '--app-version', project.version,
                '--vendor', 'Pavel Kuzmin',
                '--input', inputDir,
                '--dest', destDir,
                '--main-jar', 'sortit.jar',
                '--main-class', mainCls,
                '--add-modules', 'java.base,java.desktop',
                '--jlink-options', jlinkOpts,

                // üëâ –í–∏–¥–∏–º—ã–π UI:
                '--win-dir-chooser',       // –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                '--win-menu',              // –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –ü—É—Å–∫
                '--win-menu-group', 'SortIt',
                '--win-shortcut',          // —è—Ä–ª—ã–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ
                // –£–±–µ—Ä–∏ —Å—Ç—Ä–æ–∫—É –≤—ã—à–µ, –µ—Å–ª–∏ —è—Ä–ª—ã–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ –Ω–µ –Ω—É–∂–µ–Ω

                // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ "–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" (–±–µ–∑ UAC-–∞–¥–º–∏–Ω–∞). –£–±–µ—Ä–∏, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ—Å–∏–ª–æ –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ –∏ —Å—Ç–∞–≤–∏–ª–æ –≤ Program Files.
                '--win-per-user-install',

                // –ò–º—è –ø–∞–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤ Program Files –∏–ª–∏ –≤ %LOCALAPPDATA%\Programs)
                '--install-dir', 'SortIt'
        ] + iconArg + resArgs

        // WiX –≤ PATH –Ω–∞ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏
        environment 'PATH', wixBin.absolutePath + File.pathSeparator + System.getenv('PATH')

        commandLine cmd
    }
}


// —á—Ç–æ–±—ã –æ–±—ã—á–Ω—ã–π Build —Å—Ä–∞–∑—É –¥–µ–ª–∞–ª exe-–æ–±—Ä–∞–∑
tasks.named('build') {
    dependsOn tasks.packAppImage
}
